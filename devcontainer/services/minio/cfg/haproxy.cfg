# HAProxy Configuration File
# This configuration sets up HAProxy as a load balancer for a MinIO cluster,
# providing high availability and load balancing for MinIO API and console endpoints.

# Global Section
# Defines global parameters for the HAProxy process
global
    log stdout format raw local0 info
    maxconn 4096
    pidfile /var/run/haproxy.pid
    user haproxy
    group haproxy
    daemon
    stats socket /var/run/haproxy.sock user haproxy group haproxy mode 660 level admin
    stats timeout 2m

# Defaults Section
# Defines default parameters for all frontend and backend sections
defaults
    # Timeouts for client, connection, server, and queue
    timeout client 10s
    timeout connect 5s
    timeout server 10s
    timeout queue 5s
    # Inherit global logging
    log global
    # Use HTTP mode by default
    mode http
    # Round-robin load balancing
    balance roundrobin
    # Maximum connections per process
    maxconn 2000
    # Enable HTTP logging
    option httplog
    # Enable health check logging
    option log-health-checks

# Frontend Section for Statistics Page
# Provides a statistics page for monitoring HAProxy
frontend stats
    # Operates in HTTP mode for the stats page
    mode http
    # Binds to port 8404
    bind *:8404
    # Enables the statistics page
    stats enable
    # URI for accessing stats
    stats uri /
    # Refresh stats every 5 seconds
    stats refresh 30s
    # Enable detailed HTTP logging
    option httplog
    stats show-node
    stats show-legends
    stats show-desc "Milvus Entrypoint HAProxy Stats"

# Frontend Section for MinIO API Traffic
# Handles incoming MinIO API traffic and routes it to the backend
frontend frontend_minio_api
    # Sets the operating mode to HTTP (layer 7)
    mode http
    # Binds the frontend to port 9000
    bind *:9000
    # Sets the default backend for API traffic
    default_backend backend_minio_api
    # Enables detailed HTTP logging, including request and response details
    option httplog

# Frontend Section for MinIO Console Traffic
# Handles incoming MinIO console traffic
frontend frontend_minio_console
    mode http
    bind *:9001
    default_backend backend_minio_console
    option httplog

# Backend Section for MinIO API Traffic
# Defines the backend servers for MinIO API
backend backend_minio_api
    mode http
    # Enable HTTP health checks
    option httpchk
    # Configure session persistence with cookies
    cookie SERVERUSED insert indirect nocache
    # Configures default server parameters
    # - Health check interval: 3 seconds
    # - Down interval: 5 seconds
    # - Fall threshold: 2 consecutive failures
    # - Rise threshold: 3 consecutive successes
    # - Observes layer 7 (application layer)
    # - Error limit: 10 errors before marking down
    # - On error: Marks the server as down
    default-server check inter 3s downinter 5s fall 2 rise 3 observe layer7 error-limit 10 on-error mark-down
    # Expect status 200 or 204
    http-check expect status 200,204,207
    # MinIO backend servers
    server minio0 minio0:9000 cookie minio0
    server minio1 minio1:9000 cookie minio1
    server minio2 minio2:9000 cookie minio2

# Backend Section for MinIO Console Traffic
# Defines the backend servers for MinIO console
backend backend_minio_console
    mode http
    # Enable HTTP health checks
    option httpchk
    # Configure session persistence with cookies
    cookie SERVERUSED insert indirect nocache
    # Server health check parameters
    default-server check inter 3s downinter 5s fall 2 rise 3 observe layer7 error-limit 10 on-error mark-down
    # Health check with GET method
    http-check send meth GET uri /minio/health/live
    # Expect status 200, 204, or 307
    http-check expect status 200,204,307
    # MinIO backend servers
    server minio0 minio0:9001 cookie minio0
    server minio1 minio1:9001 cookie minio1
    server minio2 minio2:9001 cookie minio2
