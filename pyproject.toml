# Project metadata for the Milvus High-Availability Cluster
[project]
name = "milvus-ha-cluster"
dynamic = ["version"]
description = "A high-availability Milvus vector database cluster implementation with robust security and performance."
readme = "README.md"
requires-python = ">=3.12,<4"
license = { text = "MIT" }
authors = [
    { name = "Dellius Alexander", email = "dellius.alexander@example.com" }
]
keywords = ["milvus", "vector-database", "high-availability", "machine-learning", "clustering"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
    "colorlog>=6.9.0,<7.0.0",
    "cryptography>=45.0.4,<46.0.0",
    "python-dotenv>=1.0.1,<2.0.0",
    "pymilvus>=2.5.11,<3.0.0",
    "tenacity>=9.1.2,<10.0.0",
]

[project.urls]
Homepage = "https://github.com/dellius-alexander/Milvus-HA-Cluster"
Repository = "https://github.com/dellius-alexander/Milvus-HA-Cluster.git"
Issues = "https://github.com/dellius-alexander/Milvus-HA-Cluster/issues"
Documentation = "https://github.com/dellius-alexander/Milvus-HA-Cluster/wiki"

[project.optional-dependencies]
# Optional dependencies for different use cases
# Run: uv sync --extra testing
testing = [
    "pytest>=8.3.3,<9.0.0",
    "pytest-asyncio>=0.24.0,<0.25.0",
    "pytest-cov>=5.0.0,<6.0.0",
    "mypy>=1.13.0,<2.0.0"
]
# Run: uv sync --extra dev
dev = [
    "ruff>=0.11.13,<0.12.0",
    "pre-commit>=3.8.0,<4.0.0",
    "pytest>=8.3.3,<9.0.0",
    "pytest-asyncio>=0.24.0,<0.25.0",
    "pytest-cov>=5.0.0,<6.0.0",
    "mypy>=1.13.0,<2.0.0"
]
# Run: uv sync --extra docs
docs = [
    "mkdocs>=1.6.1,<2.0.0",
    "mkdocs-material>=9.5.0,<10.0.0"
]

# Build system configuration for compatibility with uv
[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

# Dynamic versioning configuration
[tool.hatch.version]
source = "regex"
path = "VERSION"
pattern = "^(?P<version>[0-9]+\\.[0-9]+\\.[0-9]+.*)$"

# Hatch build configuration
[tool.hatch.build.targets.wheel]
packages = ["src/*"]

# Package discovery
[tool.setuptools]
package-dir = { "" = "src" }
include-package-data = true

# uv-specific configuration
[tool.uv]
managed = true
python-preference = "only-managed"
resolution = "highest"

[tool.uv.workspace]
members = ["."]

# Ruff configuration for linting and formatting
[tool.ruff]
src = ["src", "tests"]
line-length = 88
indent-width = 4
target-version = "py312"
show-fixes = true
extend-exclude = [
    "migrations/*",
    "dist/*",
    "build/*",
    "*.egg-info/*"
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "UP",  # pyupgrade
    "S",   # flake8-bandit (security)
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "D",   # pydocstyle
    "ANN", # flake8-annotations (type hints)
    "C4",  # flake8-comprehensions
    "PT"   # flake8-pytest-style
]
ignore = [
    "D203",  # Incompatible with D211
    "D213",  # Incompatible with D212
    "ANN101" # Allow missing self/cls annotations
]
fixable = ["E", "W", "F", "UP", "S", "B", "SIM", "I", "D", "C4"]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

# Pytest configuration for testing
[tool.pytest.ini_options]
addopts = "--cov=src --cov-report=xml --cov-report=html"
asyncio_mode = "auto"
testpaths = ["tests"]
markers = [
    "integration: Tests requiring a live Milvus server",
    "unit: Unit tests with mocked dependencies"
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "raise NotImplementedError"
]
