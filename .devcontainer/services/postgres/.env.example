# env.example
# This file serves as a template for configuring environment variables for a Patroni-managed PostgreSQL HA cluster.
# Copy this file to `.env` and replace placeholder values with your actual configuration.
# Variables are based on Patroni's ENVIRONMENT.rst documentation and the project's requirements.

# Patroni Global Configuration
# PATRONI_SCOPE: Defines the cluster name for the Patroni HA setup (unique identifier for the cluster).
PATRONI_SCOPE=example-cluster

# PATRONI_NAMESPACE: Path in the configuration store (e.g., Etcd) where Patroni stores cluster information.
PATRONI_NAMESPACE=/service

# PATRONI_NAME: Unique name of the node within the cluster (set per node, e.g., patroni-replica0).
PATRONI_NAME=example-node

# Patroni Log Configuration
# PATRONI_LOG_TYPE: Log format, either 'plain' or 'json'. Use 'json' for structured logging (requires python-json-logger).
PATRONI_LOG_TYPE=json

# PATRONI_LOG_LEVEL: Logging level (e.g., DEBUG, INFO, WARNING, ERROR). DEBUG provides detailed output.
PATRONI_LOG_LEVEL=DEBUG

# PATRONI_LOG_FORMAT: Log format for json logs, as a list of LogRecord attributes or renamed fields.
PATRONI_LOG_FORMAT=["message","module","funcName","lineno",{"levelname":"level"},{"asctime":"@timestamp"},"process","threadName","pathname"]

# PATRONI_LOG_STATIC_FIELDS: Additional static fields for json logs (e.g., app name, scope).
PATRONI_LOG_STATIC_FIELDS={"app":"patroni","scope":"postgres","node":"${PATRONI_NAME}"}

# PATRONI_LOG_FILE_NUM: Number of log files to retain for rotation.
PATRONI_LOG_FILE_NUM=10

# PATRONI_LOG_FILE_SIZE: Maximum size of each log file in bytes (e.g., 10MB).
PATRONI_LOG_FILE_SIZE=10485760

# PATRONI_LOG_DATEFORMAT: Datetime format for log timestamps (Python strftime format).
PATRONI_LOG_DATEFORMAT=%Y-%m-%d %H:%M:%S,%f

# PATRONI_LOG_HANDLERS: List of log handlers (e.g., file, stderr, stdout).
PATRONI_LOG_HANDLERS=["file","stderr","stdout"]

# Patroni Etcd Configuration
# PATRONI_ETCD3_HOSTS: Comma-separated list of Etcd endpoints (host:port) for distributed configuration store.
PATRONI_ETCD3_HOSTS=etcd-proxy:2379

# PATRONI_ETCD3_PROTOCOL: Protocol for Etcd communication (http or https).
PATRONI_ETCD3_PROTOCOL=http

# PATRONI_ETCD3_USE_PROXIES: If true, treat hosts as proxies without topology discovery.
PATRONI_ETCD3_USE_PROXIES=false

# PostgreSQL Configuration
# PG_MAJOR: PostgreSQL major version (e.g., 17.5).
PG_MAJOR=17.5

# PATRONI_POSTGRESQL_USERNAME: PostgreSQL superuser username (default: postgres).
PATRONI_POSTGRESQL_USERNAME=postgres

# PATRONI_POSTGRESQL_REPLICATION_USERNAME: Username for replication (created during initialization).
PATRONI_POSTGRESQL_REPLICATION_USERNAME=repl

# PATRONI_POSTGRESQL_LISTEN: IP:port where PostgreSQL listens (e.g., 0.0.0.0:5432 for all interfaces).
PATRONI_POSTGRESQL_LISTEN=0.0.0.0:5432

# PATRONI_POSTGRESQL_CONNECT_ADDRESS: IP:port for PostgreSQL external connections (node-specific).
PATRONI_POSTGRESQL_CONNECT_ADDRESS=example-node:5432

# PATRONI_POSTGRESQL_DATA_DIR: Directory for PostgreSQL data files.
PATRONI_POSTGRESQL_DATA_DIR=/var/lib/postgresql/data

# POSTGRES_DB: Default database name to create (matches application needs, e.g., milvus).
POSTGRES_DB=exampledb

# POSTGRES_INITDB_ARGS: Additional arguments for initdb (e.g., enable data checksums).
POSTGRES_INITDB_ARGS=--data-checksums

# POSTGRES_HOST_AUTH_METHOD: Authentication method for local connections (e.g., trust for dev, md5 for prod).
POSTGRES_HOST_AUTH_METHOD=trust

# PGDATA: PostgreSQL data directory path (matches PATRONI_POSTGRESQL_DATA_DIR).
PGDATA=/var/lib/postgresql/data

# PGDATA_BASE: Base directory for PostgreSQL data.
PGDATA_BASE=/var/lib/postgresql

# PGHOST: Hostname or IP for PostgreSQL connections (e.g., internal network IP).
PGHOST=127.0.0.1

# PGPORT: Port for PostgreSQL connections (default: 5432).
PGPORT=5432

# Patroni REST API Configuration
# PATRONI_RESTAPI_USERNAME: Username for Patroni REST API basic authentication.
PATRONI_RESTAPI_USERNAME=patroni

# PATRONI_RESTAPI_LISTEN: IP:port where Patroni REST API listens (e.g., 0.0.0.0:8008).
PATRONI_RESTAPI_LISTEN=0.0.0.0:8008

# PATRONI_RESTAPI_CONNECT_ADDRESS: IP:port for external REST API access (node-specific).
PATRONI_RESTAPI_CONNECT_ADDRESS=example-node:8008

# Additional Users
# MILVUS_USER: Application-specific database user (e.g., for Milvus).
MILVUS_USER=appuser

# HAPROXY_STATS_USER: Username for HAProxy stats interface.
HAPROXY_STATS_USER=admin

# HAPROXY_STATS_PASSWORD: Password for HAProxy stats interface (use a secure password).
HAPROXY_STATS_PASSWORD=changeme

# Secrets (Paths to secret files)
# POSTGRES_PASSWORD_FILE: Path to the file containing the PostgreSQL superuser password.
POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password

# PATRONI_POSTGRESQL_REPLICATION_PASSWORD_FILE: Path to the file containing the replication user password.
PATRONI_POSTGRESQL_REPLICATION_PASSWORD_FILE=/run/secrets/repl_password

# MILVUS_PASSWORD_FILE: Path to the file containing the application user password.
MILVUS_PASSWORD_FILE=/run/secrets/milvus_password

# PATRONI_RESTAPI_PASSWORD_FILE: Path to the file containing the Patroni REST API password.
PATRONI_RESTAPI_PASSWORD_FILE=/run/secrets/patroni_password

# Additional Notes:
# - Replace placeholder values (e.g., 'changeme', 'example-node') with actual values.
# - Do not commit sensitive data (e.g., passwords) to version control; use Docker secrets for production.
# - Ensure secret files are mounted at the specified paths in the Docker container.
# - For node-specific variables (e.g., PATRONI_NAME, PATRONI_POSTGRESQL_CONNECT_ADDRESS), set unique values per node.