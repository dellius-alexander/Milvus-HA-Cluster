# docker-compose.yml
# Define networks so our containers can talk to each other securely
networks:
  # Internal network for PostgreSQL master, replicas, and HAProxy
  postgres-cluster:
    name: postgres-cluster
    driver: bridge
    internal: true
  # External network for the client to connect to HAProxy
  external-network:
    name: external-network
    driver: bridge
    external: true

# Define volumes to store data so it doesn't get lost when containers restart
volumes:
  master-data: {} # Storage for the master database
  replica1-data: {} # Storage for replica 1
  replica2-data: {} # Storage for replica 2
  replica3-data: {} # Storage for replica 3
  archive: {} # Shared storage for WAL archives

# Define secrets for sensitive data like passwords
secrets:
  postgres_password:
    name: postgres_password # Name of the secret
    file: .secrets/postgres_password.txt # Admin password
  repl_password:
    name: repl_password # Name of the secret
    file: .secrets/repl_password.txt # Replication user password
  milvus_password:
    name: milvus_password # Name of the secret
    file: .secrets/milvus_password.txt # Milvus password

# Define services (the containers we want to run)
services:
  # The main PostgreSQL server (master) where we write data
  postgres-master:
#    build:
#      context: . # Build from the current directory
#      dockerfile: postgres.Dockerfile
#      args:
#        HOSTNAME: postgres-master
#        POSTGRES_USER: ${POSTGRES_USER}
#        PGDATA: ${PGDATA}
    image: postgres:${PG_MAJOR}
    container_name: postgres-master
    hostname: postgres-master
    labels:
      - "project=pg-cluster"
      - "environment=development"
    environment:
      - PG_MAJOR=${PG_MAJOR}
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - REPL_PASSWORD_FILE=/run/secrets/repl_password
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=${PGDATA}
      - REPL_USER=${REPL_USER}
      - MILVUS_PASSWORD=${MILVUS_PASSWORD}
    secrets:
      - postgres_password
      - repl_password
    volumes:
      - master-data:${PGDATA}
      - archive:${PGDATA_BASE}/archive
    expose:
      - ${PGPORT} # Port for PostgreSQL
    networks:
      - postgres-cluster
#    entrypoint: ["/custom-entrypoint.sh", "postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
#    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Replica 1: A copy of the master for reading data
  postgres-replica1:
#    build:
#      context: .
#      dockerfile: postgres.Dockerfile
#      args:
#        HOSTNAME: postgres-replica1
#        POSTGRES_USER: ${POSTGRES_USER}
#        PGDATA: ${PGDATA}
    image: postgres:${PG_MAJOR}
    container_name: postgres-replica1
    hostname: postgres-replica1
    labels:
      - "project=pg-cluster"
      - "environment=development"
    environment:
      - PG_MAJOR=${PG_MAJOR}
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - REPL_PASSWORD_FILE=/run/secrets/repl_password
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=${PGDATA}
      - REPL_USER=${REPL_USER}
      - MILVUS_PASSWORD=${MILVUS_PASSWORD}
    secrets:
      - postgres_password
      - repl_password
    volumes:
      - replica1-data:${PGDATA}
      - archive:${PGDATA_BASE}/archive
    expose:
      - ${PGPORT} # Port for PostgreSQL
    networks:
      - postgres-cluster
#    entrypoint: ["/custom-entrypoint.sh", "postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
#    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    restart: on-failure
    depends_on:
      postgres-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # Replica 2: Another copy for reading data
  postgres-replica2:
#    build:
#      context: .
#      dockerfile: postgres.Dockerfile
#      args:
#        HOSTNAME: postgres-replica2
#        POSTGRES_USER: ${POSTGRES_USER}
#        PGDATA: ${PGDATA}
    image: postgres:${PG_MAJOR}
    container_name: postgres-replica2
    hostname: postgres-replica2
    labels:
      - "project=pg-cluster"
      - "environment=development"
    environment:
      - PG_MAJOR=${PG_MAJOR}
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - REPL_PASSWORD_FILE=/run/secrets/repl_password
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=${PGDATA}
      - REPL_USER=${REPL_USER}
      - MILVUS_PASSWORD=${MILVUS_PASSWORD}
    secrets:
      - postgres_password
      - repl_password
    volumes:
      - replica2-data:${PGDATA}
      - archive:${PGDATA_BASE}/archive
    expose:
      - ${PGPORT} # Port for PostgreSQL
    networks:
      - postgres-cluster
#    entrypoint: ["/custom-entrypoint.sh", "postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
#    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    restart: on-failure
    depends_on:
      postgres-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # Replica 3: Third copy for reading data
  postgres-replica3:
#    build:
#      context: .
#      dockerfile: postgres.Dockerfile
#      args:
#        HOSTNAME: postgres-replica3
#        POSTGRES_USER: ${POSTGRES_USER}
#        PGDATA: ${PGDATA}
    image: postgres:${PG_MAJOR}
    container_name: postgres-replica3
    hostname: postgres-replica3
    labels:
      - "project=pg-cluster"
      - "environment=development"
    environment:
      - PG_MAJOR=${PG_MAJOR}
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - REPL_PASSWORD_FILE=/run/secrets/repl_password
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=${PGDATA}
      - REPL_USER=${REPL_USER}
      - MILVUS_PASSWORD=${MILVUS_PASSWORD}
    secrets:
      - postgres_password
      - repl_password
    volumes:
      - replica3-data:${PGDATA}
      - archive:${PGDATA_BASE}/archive
    expose:
      - ${PGPORT} # Port for PostgreSQL
    networks:
      - postgres-cluster
#    entrypoint: ["/custom-entrypoint.sh", "postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
#    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    restart: on-failure
    depends_on:
      postgres-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # HAProxy: Directs traffic to the master for writes and replicas for reads
  postgres-haproxy:
    build:
      context: .
      dockerfile: haproxy-patroni.Dockerfile
    container_name: postgres-haproxy
    hostname: postgres-haproxy
    labels:
      - "project=pg-cluster"
      - "environment=development"
    ports:
      - "5432:5432" # Master for writes
      - "5433:5433" # Replica 1,2,3 for reads
      - "8080:8080" # HAProxy stats page
    networks:
      - postgres-cluster
      - external-network
    depends_on:
      postgres-master:
        condition: service_healthy
      postgres-replica1:
        condition: service_healthy
      postgres-replica2:
        condition: service_healthy
      postgres-replica3:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "haproxy", "-v"]
      interval: 10s
      timeout: 5s
      retries: 3

